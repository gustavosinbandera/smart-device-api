AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: smart-device-api

Globals:
  Function:
    Timeout: 5
    Tracing: Active

Resources:

  ## --- Cognito User Pool ---
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: SmartDeviceUserPool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireUppercase: false
          RequireLowercase: false
          RequireNumbers: true
          RequireSymbols: false
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: smart-device-client
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:3000/callback
        - https://app.domoticore.co/callback
      LogoutURLs:
        - http://localhost:3000/logout
        - https://app.domoticore.co/logout
      SupportedIdentityProviders:
        - COGNITO

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: smart-device-demo-domain
      UserPoolId: !Ref CognitoUserPool

  ## --- API Gateway ---
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: SmartDeviceApi
      StageName: Prod
      TracingEnabled: true
      Cors:
        AllowMethods: "'GET,OPTIONS'"
        AllowHeaders: "'Authorization,Content-Type'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            Identity:
              Header: Authorization

  ## --- Lambda: Obtener dispositivos del usuario ---
  GetDevicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-devices/
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Environment:
        Variables:
          DEVICES_TABLE: Devices
          DEVICE_ALIASES_TABLE: DeviceAliases
          USERS_TABLE: Users
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Devices
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Devices/index/user_id-index
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/DeviceAliases
            - Effect: Allow 
              Action:
                - dynamodb:GetItem
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Devices
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users
      Events:
        GetDevices:
          Type: Api
          Properties:
            Path: /devices
            Method: get
            RestApiId: !Ref MyApi
            Auth:
              Authorizer: CognitoAuthorizer

        GetDevicesOptions:
          Type: Api
          Properties:
            Path: /devices
            Method: options
            RestApiId: !Ref MyApi
            Auth:
              Authorizer: NONE

  ## --- Lambda: Obtener un dispositivo por ID (con aliases incluidos) ---
  GetDeviceByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetDeviceByIdFunction
      CodeUri: get-device-by-id/
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Environment:
        Variables:
          DEVICES_TABLE: Devices
          DEVICE_ALIASES_TABLE: DeviceAliases
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Devices
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/DeviceAliases
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/DeviceAliases
      Events:
        GetDeviceById:
          Type: Api
          Properties:
            Path: /devices/{device_id}
            Method: get
            RestApiId: !Ref MyApi
            Auth:
              Authorizer: CognitoAuthorizer

        GetDeviceByIdOptions:
          Type: Api
          Properties:
            Path: /devices/{device_id}
            Method: options
            RestApiId: !Ref MyApi
            Auth:
              Authorizer: NONE


  GetGpsHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-gps-history/
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Environment:
        Variables:
          GPS_LOGS_TABLE: GpsLogs
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/GpsLogs
      Events:
        GpsHistory:
          Type: Api
          Properties:
            Path: /gps-history
            Method: get
            RestApiId: !Ref MyApi
            Auth:
              Authorizer: CognitoAuthorizer

        GpsHistoryOptions:
          Type: Api
          Properties:
            Path: /gps-history
            Method: options
            RestApiId: !Ref MyApi
            Auth:
              Authorizer: NONE

  SimulateGpsMovementFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: simulate-gps/
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Environment:
        Variables:
          GPS_LOGS_TABLE: GpsLogs
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/GpsLogs
      Events:
        SimulateGps:
          Type: Api
          Properties:
            Path: /simulate-gps
            Method: post
            RestApiId: !Ref MyApi
            Auth:
              Authorizer: CognitoAuthorizer

        SimulateGpsOptions:
          Type: Api
          Properties:
            Path: /simulate-gps
            Method: options
            RestApiId: !Ref MyApi
            Auth:
              Authorizer: NONE

  ## --- DynamoDB: Tabla principal de dispositivos ESP32 ---
  ## Esta tabla guarda un ítem por dispositivo.
  ## Campos recomendados:
  ## - device_id (PK): string único del ESP32 (por ejemplo, esp32-001)
  ## - user_id: ID del usuario dueño del dispositivo
  ## - name: nombre opcional para mostrar ("Placa de prueba", "ESP Dormitorio")
  ## - description: descripción opcional
  ## - created_at: timestamp ISO
  ## - location: texto o coordenadas (opcional)
  DevicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Devices
      AttributeDefinitions:
        - AttributeName: device_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: device_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user_id-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  ## --- DynamoDB: Aliases y configuración de pines del ESP32 ---
  ## Esta tabla usa el patrón de "single-table design":
  ## - PK: device_id
  ## - SK:
  ##    - "#METADATA#": configuración general del dispositivo
  ##    - "GPIO#gpio-1", "GPIO#gpio-2", etc: cada pin del ESP32
  ##
  ## Cada ítem "GPIO#" puede tener:
  ## - aliases: lista de nombres (["luz cocina", "foco cocina"])
  ## - direction: "input" | "output"
  ## - type: "digital" | "analog"
  ## - state: true/false (si es una salida, para reflejar estado actual)
  ## - sensor_value: número (si es una entrada, valor leído)
  ## - unit: "Celsius", "Lux", etc (opcional para sensores)
  ##
  ## El ítem "#METADATA#" puede incluir:
  ## - firmware_version
  ## - online: true/false
  ## - last_seen: timestamp
  DeviceAliasesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DeviceAliases
      AttributeDefinitions:
        - AttributeName: device_id
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: device_id
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  GpsLogsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GpsLogs
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: device_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: device_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
          

  ## --- DynamoDB: Usuarios registrados ---
  ## Tabla simple para registrar usuarios por su user_id (del sub de Cognito).
  ## Campos posibles:
  ## - user_id (PK): sub de Cognito
  ## - email: email del usuario
  ## - name: nombre completo (opcional)
  ## - created_at: timestamp
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH

  ## --- DynamoDB: Dispositivos compartidos entre usuarios ---
  ## Permite compartir acceso a un dispositivo entre usuarios.
  ## Campos:
  ## - raspi_id: ID del dispositivo compartido (se puede renombrar si ya no hay Raspberry)
  ## - shared_with: user_id del que recibe acceso
  SharedAccessTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SharedAccess
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: raspi_id
          AttributeType: S
        - AttributeName: shared_with
          AttributeType: S
      KeySchema:
        - AttributeName: raspi_id
          KeyType: HASH
        - AttributeName: shared_with
          KeyType: RANGE

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  GetDevicesFunctionArn:
    Description: "ARN of GetDevices Lambda"
    Value: !GetAtt GetDevicesFunction.Arn

  CognitoUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref CognitoUserPool

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref CognitoUserPoolClient

  CognitoUserPoolDomain:
    Description: "Cognito Domain"
    Value: !Ref CognitoUserPoolDomain
